name: configure

import: configure

usage:
  js:
    signature: |
      ```js
      configure(searchParameters);
      ```
    import:
      - code: |
          ```js With a package manager
          import { configure } from 'instantsearch.js/es/widgets';
          ```
      - code: |
          ```js With a CDN
          const { configure } = instantsearch.widgets;
          // or directly use instantsearch.widgets.configure()
          ```
  react:
    signature: |
      ```jsx
      <Configure {...searchParameters} />
      ```
    import:
      - code: |
          ```js
          import { Configure } from 'react-instantsearch';
          ```
  vue:
    signature: |
      ```js
      <ais-configure
        // Optional parameters
        v-bind="searchParameters"
      />
      ```
    import:
      - code: |
          ```js Component
          import { AisConfigure } from 'vue-instantsearch'; // Vue 2
          import { AisConfigure } from 'vue-instantsearch/vue3/es'; // Vue 3

          export default {
            components: {
              AisConfigure
            },
            // ...
          };
          ```
      - code: |
          ```js Plugin
          import Vue from 'vue';
          import InstantSearch from 'vue-instantsearch'; // Vue 2
          import InstantSearch from 'vue-instantsearch/vue3/es'; // Vue 3

          Vue.use(InstantSearch);
          ```

storybook_link: https://instantsearchjs.netlify.app/stories/js/?path=/story/basics-configure--force-1-hit-per-page
short_description: |
  The widget lets you provide raw search parameters to the Algolia API without rendering anything.

meta_description: A widget for InstantSearch.js to provide search parameters to Algolia.

description: |
  The `configure` widget lets you provide raw search parameters to the Algolia API without rendering anything.

  Any props you add to this widget is forwarded to Algolia. For more information on the different parameters you can set, have a look at the [search parameters API reference](/doc/api-reference/search-api-parameters/).

examples:
  js: |
    ```js
    configure({
      hitsPerPage: 8,
      enablePersonalization: true,
    });
    ```
  react: |
    ```js
    <Configure
      analytics={false}
      filters="free_shipping:true"
      hitsPerPage={40}
    />
    ```
  vue: |
    ```js
    <ais-configure
      :hits-per-page.camel="4"
      :distinct="true"
      :analytics="false"
      :enable-personalization.camel="true"
    />
    ```

widget_parameters_groups:
  - name: 'Options'
    parameters:
      - name: searchParameters
        type: object
        required: true
        description: |
          A list of [search parameters](/doc/api-reference/search-api-parameters/) to enable when the widget mounts.
        snippets:
          'object': |
            ```js
            configure({
              hitsPerPage: 8,
              distinct: true,
              clickAnalytics: true,
              enablePersonalization: true,
            });
            ```

connector_name:
  js: connectConfigure
  react: useConfigure

connector_usage:
  js:
    process_step_1: |
      ```js
      const renderConfigure = (renderOptions, isFirstRender) => {
        // Rendering logic
      };
      ```
    process_step_2: |
      ```js
      import { connectConfigure } from 'instantsearch.js/es/connectors';

      const customConfigure = connectConfigure(
        renderConfigure
      );
      ```
    process_step_3: |
      ```js
      search.addWidgets([
        customConfigure({
          // instance params
        })
      ]);
      ```
    process: |
      [// 1. Create a render function](#create-a-render-function)
      const renderConfigure = (renderOptions, isFirstRender) => {
        // Rendering logic
      };

      [// 2. Create the custom widget](#create-and-instantiate-the-custom-widget)
      const customConfigure = connectConfigure(
        renderConfigure
      );

      [// 3. Instantiate](#create-and-instantiate-the-custom-widget)
      search.addWidgets([
        customConfigure({
          // instance params
        })
      ]);

    renderFunction: |
      const renderConfigure = (renderOptions, isFirstRender) => {
        const {
          __function__ #{refine},
          __object__ #{widgetParams},
        } = renderOptions;

        if (isFirstRender) {
          // Do some initial rendering and bind events
        }

        // Render the widget
      }

    initializeWidget: |
      const customConfigure = connectConfigure(
        renderConfigure
      );

      search.addWidgets([
        customConfigure({
          #{searchParameters}: __object__,
        })
      ]);
  react:
    process_step_1: |
      ```js
      import { useConfigure } from 'react-instantsearch';

      function CustomConfigure(props) {
        const { refine } = useConfigure(props);

        return null;
      }
      ```
    process_step_2: |
      ```js
      <CustomConfigure {...searchParameters} />
      ```
    process_step_3: |
      ```js
      search.addWidgets([
        customConfigure({
          // instance params
        })
      ]);
      ```

connector_parameters_groups:
  - name: 'Rendering options'
    parameters:
      - name: refine
        type: function
        description: |
          Removes the provided `searchParameters` and applies the one provided to the function.
        snippets: |
          ```js
          const renderConfigure = (renderOptions, isFirstRender) => {
            const { refine } = renderOptions;

            if (isFirstRender) {
              const button = document.createElement('button');
              button.textContent = 'Sets "hitsPerPage" to 4';

              button.addEventListener('click', () => {
                refine({ hitsPerPage: 4 });
              });

              document.querySelector('#configure').appendChild(button);
            }
          };
          ```
      - name: widgetParams
        type: object
        description: |
          All original widget options forwarded to the render function.
        snippets: |
          ```js
          const renderConfigure = (renderOptions, isFirstRender) => {
            const { widgetParams } = renderOptions;

            widgetParams.container.innerHTML = `
              <pre>${JSON.stringify(widgetParams.searchParameters, null, 2)}</pre>
            `;
          };

          // ...

          search.addWidgets([
            customConfigure({
              container: document.querySelector('#configure'),
              searchParameters: {
                hitsPerPage: 8,
              },
            })
          ]);
          ```

connector_instance_parameters_groups:
  - name: 'Instance options'
    parameters:
      - name: searchParameters
        type: object
        required: true
        description: |
          A list of [search parameters](/doc/api-reference/search-api-parameters/) to enable when this widget renders.
        snippets:
          'object': |
            ```js
            customConfigure({
              searchParameters: {
                hitsPerPage: 8,
                distinct: true,
                clickAnalytics: true,
              },
            });
            ```

connector_examples:
  js: |
    ```js
    // Create the render function
    const renderConfigure = (renderOptions, isFirstRender) => {
      const { refine, widgetParams } = renderOptions;

      if (isFirstRender) {
        const button = document.createElement('button');
        const pre = document.createElement('pre');

        button.addEventListener('click', () => {
          refine({
            hitsPerPage: widgetParams.searchParameters.hitsPerPage === 8 ? 4 : 8,
          });
        });

        widgetParams.container.appendChild(button);
        widgetParams.container.appendChild(pre);
      }

      widgetParams.container.querySelector(
        'button'
      ).textContent = `Sets "hitsPerPage" to ${
        widgetParams.searchParameters.hitsPerPage === 8 ? 4 : 8
      }`;

      widgetParams.container.querySelector('pre').innerHTML = JSON.stringify(
        widgetParams.searchParameters,
        null,
        2
      );
    };

    // Create the custom widget
    const customConfigure = connectConfigure(
      renderConfigure,
      () => {}
    );

    // Instantiate the custom widget
    search.addWidgets([
      customConfigure({
        container: document.querySelector('#configure'),
        searchParameters: {
          hitsPerPage: 8,
        },
      })
    ]);
    ```

  html: |
    ```html
    <div id="configure"></div>
    ```

html_output: |
  This widget has no HTML output.
