openapi: 3.1.0
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
info:
  title: Ask AI API
  description: |
    API specification for the Ask AI platform. This includes public endpoints for chat interactions and feedback submission,
    and internal endpoints for managing configurations, prompts, and domains.
  version: "1.0.0"
servers:
  - url: https://api.askai.algolia.com

paths:
  /chat:
    post:
      operationId: postResponse
      summary: Generate a response
      description: Generates a response using the configured LLM and prompt template.
      tags: [Public]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configId:
                  $ref: '#/components/schemas/ConfigId'
                question:
                  $ref: '#/components/schemas/Question'
                headers:
                  $ref: '#/components/schemas/Headers'
              required: [configId, question]
      responses:
        "200":
          description: Successfully generated a response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: '#/components/schemas/Answer'
        "401":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Configuration not found"

  /feedback:
    post:
      operationId: postFeedback
      summary: Submit feedback on a response
      description: Allows users to submit feedback (thumbs up or down) for an AI-generated response.
      tags: [Public]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configId:
                  $ref: '#/components/schemas/ConfigId'
                responseId:
                  $ref: '#/components/schemas/ResponseId'
                feedback:
                  $ref: '#/components/schemas/Feedback'
                comment:
                  $ref: '#/components/schemas/Comment'
              required: [configId, responseId, feedback]
      responses:
        "200":
          description: Feedback successfully accepted and recorded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Feedback successfully accepted and recorded"

  /token:
    post:
      operationId: postToken
      summary: Generate a short-lived token
      description: Generates a short-lived JSON web token (JWT) for secure API interactions.
      tags: [Public]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configId:
                  $ref: '#/components/schemas/ConfigId'
                appId:
                  $ref: '#/components/schemas/AppId'
                apiKey:
                  $ref: '#/components/schemas/ApiKey'
                domain:
                  $ref: '#/components/schemas/Domain'
              required: [configId, appId, apiKey, domain]
      responses:
        "200":
          description: JWT token successfully issued.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
              example:
                token: "<jwt-token>"
  /config:
    get:
      operationId: getConfigurations
      summary: List configurations
      tags: [Configuration]
      responses:
        "200":
          description: List of configurations.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    model:
                      $ref: '#/components/schemas/Model'
                    provider:
                      $ref: '#/components/schemas/Provider'
                    prompts:
                      type: array
                      items:
                        $ref: '#/components/schemas/PromptId'
                    domains:
                      type: array
                      items:
                        $ref: '#/components/schemas/DomainId'
                    keys:
                      $ref: '#/components/schemas/Keys'

    post:
      operationId: postConfiguration
      summary: Create a configuration
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  $ref: '#/components/schemas/Model'
                provider:
                  $ref: '#/components/schemas/Provider'
                prompts:
                  type: array
                  items:
                    $ref: '#/components/schemas/PromptId'
                domains:
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainId'
                keys:
                  $ref: '#/components/schemas/Keys'
              required: [model, provider]
      responses:
        "201":
          description: Configuration successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
              example:
                id: "12345"

  /config/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: Unique identifier for the configuration.
    get:
      operationId: getConfiguration
      summary: Retrieve a configuration
      tags: [Configuration]
      responses:
        "200":
          description: Configuration details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  model:
                    $ref: '#/components/schemas/Model'
                  provider:
                    $ref: '#/components/schemas/Provider'
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PromptId'
                  domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainId'
                  keys:
                    $ref: '#/components/schemas/Keys'
        "404":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Configuration not found"
    patch:
      operationId: patchConfiguration
      summary: Change a configuration
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  $ref: '#/components/schemas/Model'
                provider:
                  $ref: '#/components/schemas/Provider'
                prompts:
                  type: array
                  items:
                    $ref: '#/components/schemas/PromptId'
                domains:
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainId'
                keys:
                  $ref: '#/components/schemas/Keys'
      responses:
        "200":
          description: Configuration successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  model:
                    $ref: '#/components/schemas/Model'
                  provider:
                    $ref: '#/components/schemas/Provider'
        "404":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Configuration not found"
    delete:
      operationId: deleteConfiguration
      summary: Delete a configuration
      tags: [Configuration]
      responses:
        "204":
          description: Configuration successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Configuration successfully deleted"
        "404":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Configuration not found"
  /prompt:
    get:
      operationId: getPrompts
      summary: List prompts
      tags: [Prompts]
      responses:
        "200":
          description: List of prompts.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    name:
                      $ref: '#/components/schemas/Name'
                    content:
                      $ref: '#/components/schemas/Content'

    post:
      operationId: postPrompt
      summary: Create a prompt
      tags: [Prompts]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                content:
                  $ref: '#/components/schemas/Content'
              required: [name, content]
      responses:
        "201":
          description: Prompt successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
              example:
                id: "67890"

  /prompt/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: Unique identifier for the prompt.
    get:
      operationId: getPrompt
      summary: Retrieve a prompt
      tags: [Prompts]
      responses:
        "200":
          description: Prompt details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  name:
                    $ref: '#/components/schemas/Name'
                  content:
                    $ref: '#/components/schemas/Content'
        "404":
          description: Prompt not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Prompt not found"
    patch:
      operationId: patchPrompt
      summary: Change a prompt
      tags: [Prompts]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                content:
                  $ref: '#/components/schemas/Content'
      responses:
        "200":
          description: Prompt successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  name:
                    $ref: '#/components/schemas/Name'
                  content:
                    $ref: '#/components/schemas/Content'
        "404":
          description: Prompt not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Prompt not found"
    delete:
      operationId: deletePrompt
      summary: Delete a prompt
      tags: [Prompts]
      responses:
        "204":
          description: Prompt successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Prompt successfully deleted."
        "404":
          description: Prompt not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Prompt not found."

  /domain:
    get:
      operationId: getDomains
      summary: List allowed domains
      tags: [Domains]
      responses:
        "200":
          description: List of domains.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    domain:
                      $ref: '#/components/schemas/Domain'

    post:
      operationId: postDomain
      summary: Allow a domain
      tags: [Domains]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  $ref: '#/components/schemas/Domain'
              required: [domain]
      responses:
        "201":
          description: Domain successfully allowed access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
              example:
                id: "abc123"

  /domain/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: Unique identifier for the domain.
    get:
      operationId: getDomain
      summary: Retrieve domain details
      tags: [Domains]
      responses:
        "200":
          description: Domain details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  domain:
                    $ref: '#/components/schemas/Domain'
        "404":
          description: Domain not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Domain not found"
    patch:
      operationId: patchDomain
      summary: Change domain name
      tags: [Domains]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  $ref: '#/components/schemas/Domain'
      responses:
        "200":
          description: Domain successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  domain:
                    $ref: '#/components/schemas/Domain'
        "404":
          description: Domain not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Domain not found"
    delete:
      operationId: deleteDomain
      summary: Remove a domain from the allow list
      tags: [Domains]
      responses:
        "204":
          description: Domain successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Domain successfully deleted"
        "404":
          description: Domain not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Domain not found"
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Response message.
      required: [error]

    ConfigId:
      type: string
      description: Configuration ID.

    ResponseId:
      type: string
      description: ID of the AI-generated response.

    Feedback:
      type: string
      description: Type of feedback provided (`thumbs_up` or `thumbs_down`).
      enum: ["thumbs_up", "thumbs_down"]

    Comment:
      type: string
      description: Comments about the feedback.

    Question:
      type: string
      description: The user's question or prompt for the AI.

    Headers:
      type: object
      description: Optional headers to include in the request.

    AppId:
      type: string
      description: Application ID.

    ApiKey:
      type: string
      description: API key for authentication.

    Domain:
      type: string
      description: Domain associated with the token.
      example: "help.example.com"

    Token:
      type: string
      description: The newly-generated JWT token.

    Answer:
      type: string
      description: AI-generated response to the question.

    PromptId:
      type: string
      description: ID of a prompt associated with this configuration.

    DomainId:
      type: string
      description: ID of a domain associated with this configuration.

    Keys:
      type: object
      description: Key-value pairs for API keys or other credentials.
      additionalProperties: true

    Model:
      type: string
      description: AI model used in this configuration.
      example: "gpt-4"

    Provider:
      type: string
      description: AI model provider.
      example: "openai"

    Name:
      type: string
      description: Prompt name.

    Content:
      type: string
      description: Prompt text.

    Id:
      type: string
      description: Unique identifier.
