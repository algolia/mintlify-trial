openapi: 3.1.0
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base
info:
  title: Ask AI API
  description: |
    API specification for the Ask AI platform. This includes public endpoints for chat interactions and feedback submission,
    and internal endpoints for managing configurations, prompts, and domains.
  version: "1.0.0"
servers:
  - url: https://api.askai.algolia.com
tags:
  - name: Configuration
    description: Manage Ask AI configurations.
  - name: Domains
    description: Manage domains allowed to use Ask AI.
  - name: Prompts
    description: Manage Ask AI LLM prompt templates.
  - name: Public
    description: Publicly-accessible endpoints for end users.

paths:
  /chat:
    post:
      operationId: postResponse
      summary: Generate a response
      description: Uses the configured LLM and prompt template to generate a response.
      tags: [Public]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configId:
                  $ref: '#/components/schemas/ConfigId'
                question:
                  $ref: '#/components/schemas/Question'
                headers:
                  $ref: '#/components/schemas/Headers'
              required: [configId, question]
      responses:
        "200":
          description: Generated a response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: '#/components/schemas/Answer'
        "401":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "The specified configuration doesn't exist"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request POST \
              --url https://api.askai.algolia.com/chat \
              --header 'Content-Type: application/json' \
              --data '{
              "configId": "config_abc123",
              "question": "How do I reset my password?",
              "headers": {
                "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                "X-AskAI-Session-Id": "session_7a2b9f84"
              }
            }'

  /feedback:
    post:
      operationId: postFeedback
      summary: Submit feedback for a response
      description: Lets users submit feedback (thumbs up or down) for an AI-generated response.
      tags: [Public]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configId:
                  $ref: '#/components/schemas/ConfigId'
                responseId:
                  $ref: '#/components/schemas/ResponseId'
                feedback:
                  $ref: '#/components/schemas/Feedback'
                comment:
                  $ref: '#/components/schemas/Comment'
              required: [configId, responseId, feedback]
      responses:
        "200":
          description: Feedback recorded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Feedback recorded"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request POST \
              --url https://api.askai.algolia.com/feedback \
              --header 'Content-Type: application/json' \
              --data '{
              "configId": "config_abc123",
              "responseId": "response_xyz789",
              "feedback": "thumbs_up",
              "comment": "Great answer, very helpful!"
            }'

  /token:
    post:
      operationId: postToken
      summary: Generate a short-lived token
      description: Generates a short-lived JSON web token (JWT) for secure API interactions.
      tags: [Public]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                configId:
                  $ref: '#/components/schemas/ConfigId'
                appId:
                  $ref: '#/components/schemas/AppId'
                apiKey:
                  $ref: '#/components/schemas/ApiKey'
                domain:
                  $ref: '#/components/schemas/Domain'
              required: [configId, appId, apiKey, domain]
      responses:
        "200":
          description: JWT issued.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request POST \
              --url https://api.askai.algolia.com/token \
              --header 'Content-Type: application/json' \
              --data '{
              "configId": "config_abc123",
              "appId": "<YourLLMAppID>",
              "apiKey": "<YourLLMAPIKey>",
              "domain": "help.example.com"
            }'
  /config:
    get:
      operationId: getConfigurations
      summary: List configurations
      tags: [Configuration]
      responses:
        "200":
          description: List of configurations.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    model:
                      $ref: '#/components/schemas/Model'
                    provider:
                      $ref: '#/components/schemas/Provider'
                    prompts:
                      type: array
                      items:
                        $ref: '#/components/schemas/PromptId'
                    domains:
                      type: array
                      items:
                        $ref: '#/components/schemas/DomainId'
                    keys:
                      $ref: '#/components/schemas/Keys'
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request GET \
              --url https://api.askai.algolia.com/config

    post:
      operationId: postConfiguration
      summary: Create a configuration
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  $ref: '#/components/schemas/Model'
                provider:
                  $ref: '#/components/schemas/Provider'
                prompts:
                  type: array
                  items:
                    $ref: '#/components/schemas/PromptId'
                domains:
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainId'
                keys:
                  $ref: '#/components/schemas/Keys'
              required: [model, provider]
      responses:
        "201":
          description: Configuration created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request POST \
              --url https://api.askai.algolia.com/config \
              --header 'Content-Type: application/json' \
              --data '{
              "model": "gpt-4",
              "provider": "openai",
              "prompts": [
                "prompt_123abc"
              ],
              "domains": [
                "domain_456def"
              ],
              "keys": {
                "api_key": "sk-test-abc123",
                "secret": "xyz987"
              }
            }'

  /config/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: Unique identifier for the configuration.
    get:
      operationId: getConfiguration
      summary: Retrieve a configuration
      tags: [Configuration]
      responses:
        "200":
          description: Configuration details retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  model:
                    $ref: '#/components/schemas/Model'
                  provider:
                    $ref: '#/components/schemas/Provider'
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PromptId'
                  domains:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainId'
                  keys:
                    $ref: '#/components/schemas/Keys'
        "404":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "The specified configuration doesn't exist"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request GET \
              --url https://api.askai.algolia.com/config/{id}
    patch:
      operationId: patchConfiguration
      summary: Change a configuration
      tags: [Configuration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  $ref: '#/components/schemas/Model'
                provider:
                  $ref: '#/components/schemas/Provider'
                prompts:
                  type: array
                  items:
                    $ref: '#/components/schemas/PromptId'
                domains:
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainId'
                keys:
                  $ref: '#/components/schemas/Keys'
      responses:
        "200":
          description: Configuration updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  model:
                    $ref: '#/components/schemas/Model'
                  provider:
                    $ref: '#/components/schemas/Provider'
        "404":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "The specified configuration doesn't exist"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request PATCH \
              --url https://api.askai.algolia.com/config/{id} \
              --header 'Content-Type: application/json' \
              --data '{
              "model": "gpt-4",
              "provider": "openai",
              "prompts": [
                "prompt_123abc"
              ],
              "domains": [
                "domain_456def"
              ],
              "keys": {
                "api_key": "sk-test-abc123",
                "secret": "xyz987"
              }
            }'
    delete:
      operationId: deleteConfiguration
      summary: Delete a configuration
      tags: [Configuration]
      responses:
        "204":
          description: Configuration deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Configuration deleted"
        "404":
          description: Configuration not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "The specified configuration doesn't exist"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request DELETE \
              --url https://api.askai.algolia.com/config/{id}
  /prompt:
    get:
      operationId: getPrompts
      summary: List prompts
      tags: [Prompts]
      responses:
        "200":
          description: List of prompts.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    name:
                      $ref: '#/components/schemas/Name'
                    content:
                      $ref: '#/components/schemas/Content'
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request GET \
              --url https://api.askai.algolia.com/prompt

    post:
      operationId: postPrompt
      summary: Create a prompt
      tags: [Prompts]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                content:
                  $ref: '#/components/schemas/Content'
              required: [name, content]
      responses:
        "201":
          description: Prompt created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'

      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request POST \
              --url https://api.askai.algolia.com/prompt \
              --header 'Content-Type: application/json' \
              --data '{
              "name": "Customer support prompt",
              "content": "You are a helpful support assistant, who..."
            }'

  /prompt/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: Unique identifier for the prompt.
    get:
      operationId: getPrompt
      summary: Retrieve a prompt
      tags: [Prompts]
      responses:
        "200":
          description: Prompt details retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  name:
                    $ref: '#/components/schemas/Name'
                  content:
                    $ref: '#/components/schemas/Content'
        "404":
          description: Prompt not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Prompt not found"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request GET \
              --url https://api.askai.algolia.com/prompt/{id}
    patch:
      operationId: patchPrompt
      summary: Change a prompt
      tags: [Prompts]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                content:
                  $ref: '#/components/schemas/Content'
      responses:
        "200":
          description: Prompt updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  name:
                    $ref: '#/components/schemas/Name'
                  content:
                    $ref: '#/components/schemas/Content'
        "404":
          description: Prompt not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Prompt not found"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request PATCH \
              --url https://api.askai.algolia.com/prompt/{id} \
              --header 'Content-Type: application/json' \
              --data '{
              "name": "Customer support prompt",
              "content": "You are a helpful support assistant, who..."
            }'
    delete:
      operationId: deletePrompt
      summary: Delete a prompt
      tags: [Prompts]
      responses:
        "204":
          description: Prompt deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Prompt deleted."
        "404":
          description: Prompt not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Prompt not found"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request DELETE \
              --url https://api.askai.algolia.com/prompt/{id}

  /domain:
    get:
      operationId: getDomains
      summary: List allowed domains
      tags: [Domains]
      responses:
        "200":
          description: List of domains.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    domain:
                      $ref: '#/components/schemas/Domain'
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request GET \
              --url https://api.askai.algolia.com/domain


    post:
      operationId: postDomain
      summary: Allow a domain
      tags: [Domains]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  $ref: '#/components/schemas/Domain'
              required: [domain]
      responses:
        "201":
          description: Domain allowed access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'

      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request POST \
              --url https://api.askai.algolia.com/domain \
              --header 'Content-Type: application/json' \
              --data '{
              "domain": "help.example.com"
            }'


  /domain/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        description: Unique identifier for the domain.
    get:
      operationId: getDomain
      summary: Retrieve domain details
      tags: [Domains]
      responses:
        "200":
          description: Domain details retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  domain:
                    $ref: '#/components/schemas/Domain'
        "404":
          description: Domain not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Domain not found"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request GET \
              --url https://api.askai.algolia.com/domain/{id}
    patch:
      operationId: patchDomain
      summary: Change domain name
      tags: [Domains]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  $ref: '#/components/schemas/Domain'
      responses:
        "200":
          description: Domain updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  domain:
                    $ref: '#/components/schemas/Domain'
        "404":
          description: Domain not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Domain not found"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request PATCH \
              --url https://api.askai.algolia.com/domain/{id} \
              --header 'Content-Type: application/json' \
              --data '{
              "domain": "help.example.com"
            }'
    delete:
      operationId: deleteDomain
      summary: Remove a domain from the allow list
      tags: [Domains]
      responses:
        "204":
          description: Domain removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Domain removed"
        "404":
          description: Domain not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Domain not found"
      x-codeSamples:
        - lang: curl
          label: curl
          source: |
            curl --request DELETE \
              --url https://api.askai.algolia.com/domain/{id}

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message.
      required: [message]

    ConfigId:
      type: string
      description: Configuration ID.
      example: "config_abc123"

    ResponseId:
      type: string
      description: ID of the AI-generated response.
      example: "response_xyz789"

    Feedback:
      type: string
      description: Type of feedback provided (`thumbs_up` or `thumbs_down`).
      enum: ["thumbs_up", "thumbs_down"]

    Comment:
      type: string
      description: Comments about the feedback.
      example: "Great answer, very helpful!"

    Question:
      type: string
      description: The user's question or prompt for the AI.
      example: "How do I reset my password?"

    Headers:
      type: object
      description: Optional headers to include in the request.
      example:
        Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        X-AskAI-Session-Id: "session_7a2b9f84"

    AppId:
      type: string
      description: LLM app ID.
      example: "<YourLLMAppID>"

    ApiKey:
      type: string
      description: LLM API key.
      example: "<YourLLMAPIKey>"

    Domain:
      type: string
      description: Domain associated with the ID.
      example: "help.example.com"

    Token:
      type: string
      description: The newly-generated JWT.
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    Answer:
      type: string
      description: AI-generated response to the question.
      example: "To reset your password, click 'Forgot password' on the login screen."

    PromptId:
      type: string
      description: ID of a prompt associated with this configuration.
      example: "prompt_123abc"

    DomainId:
      type: string
      description: ID of a domain associated with this configuration.
      example: "domain_456def"

    Keys:
      type: object
      description: Key-value pairs for API keys or other credentials.
      additionalProperties: true
      example:
        api_key: "sk-test-abc123"
        secret: "xyz987"

    Model:
      type: string
      description: AI model used in this configuration.
      example: "gpt-4"

    Provider:
      type: string
      description: AI model provider.
      example: "openai"

    Name:
      type: string
      description: Prompt name.
      example: "Customer support prompt"


    Content:
      type: string
      description: Prompt text.
      example: "You are a helpful support assistant, who..."

    Id:
      type: string
      description: Unique identifier.
      example: "id_001abc"
